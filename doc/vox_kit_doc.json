[{"fqdn":"references.kit_functions.avatar","kind":"class","title":"Avatar","description":"","children":[{"fqdn":"references.kit_functions.avatar.getresponsedata","kind":"method","title":"getResponseData","description":"Gets response data from an avatar.\n```js\nconst kit = new VoximplantKit(context);\nif (kit.isAvatar()) {\n  const avatarResponse = kit.avatar.getResponseData();\n  console.log(avatarResponse);\n  // ... do something\n}// End of function\n callback(200, kit.getResponseBody());\n```","returns":["[AvatarMessageObject](/kit/docs/references/kit_functions/avatarmessageobject)","null"]},{"fqdn":"references.kit_functions.avatar.sendmessagetoavatar","kind":"method","title":"sendMessageToAvatar","description":"Send a message to a Voximplant avatar.\n```js\nconst kit = new VoximplantKit(context);\nif (kit.isMessage()) {\n  try {\n    const conversationId = kit.getConversationUuid();\n    const callbackUri = kit.getFunctionUriById(33);\n    const {text} = kit.getIncomingMessage();\n    // This variable must be added to the environment variables yourself.\n    const avatarId = kit.getEnvVariable('avatarId');\n    const voxAccountId = kit.getEnvVariable('VOXIMPLANT_ACCOUNT_ID');\n    const avatarLogin = kit.getEnvVariable('VOXIMPLANT_AVATAR_LOGIN');\n    const avatarPass = kit.getEnvVariable('VOXIMPLANT_AVATAR_PASSWORD');\n    await kit.avatar.sendMessageToAvatar({\n      callbackUri,\n      voxAccountId,\n      avatarLogin,\n      avatarPass,\n      avatarId,\n      conversationId,\n      utterance: text,\n      customData: {}\n    })\n  } catch (err) {\n    console.error(err);\n  }\n}// End of function\ncallback(200, kit.getResponseBody());\n```","returns":["Promise<unknown>"],"params":[{"fqdn":"references.kit_functions.avatar.sendmessagetoavatar.config","title":"config","description":"","optional":false,"types":["[AvatarConfig](/kit/docs/references/kit_functions/avatarconfig)"]}]},{"fqdn":"references.kit_functions.avatar.sendmessagetoconversation","kind":"method","title":"sendMessageToConversation","description":"Send the avatar's reply to the conversation.\n```js\nconst kit = new VoximplantKit(context);\nif (kit.isAvatar()) {\n const conversationUuid = kit.getConversationUuid();\n const message = kit.getMessageObject();\n try {\n   await kit.avatar.sendMessageToConversation(conversationUuid, message);\n } catch(err) {\n   console.error(err)\n }\n}// End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<unknown>"],"params":[{"fqdn":"references.kit_functions.avatar.sendmessagetoconversation.conversationuuid","title":"conversationUuid","description":"","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.avatar.sendmessagetoconversation.message","title":"message","description":"","optional":false,"types":["[ChannelDataObject](/kit/docs/references/kit_functions/channeldataobject)"]}]},{"fqdn":"references.kit_functions.avatar.setavatarapiurl","kind":"method","title":"setAvatarApiUrl","description":"","returns":["void"],"params":[{"fqdn":"references.kit_functions.avatar.setavatarapiurl.url","title":"url","description":"","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.avatar.stopavatarsession","kind":"method","title":"stopAvatarSession","description":"Terminates an avatar session.\n```js\nconst kit = new VoximplantKit(context);\n// This variable must be added to the environment variables yourself.\nconst avatarId = kit.getEnvVariable('avatarId');\nconst conversationId = kit.getConversationUuid();\nconst voxAccountId = kit.getEnvVariable('VOXIMPLANT_ACCOUNT_ID');\nconst avatarLogin = kit.getEnvVariable('VOXIMPLANT_AVATAR_LOGIN');\nconst avatarPass = kit.getEnvVariable('VOXIMPLANT_AVATAR_PASSWORD');\nif (kit.isAvatar()) {\n  try {\n    await kit.avatar.stopAvatarSession({\n      voxAccountId,\n      avatarLogin,\n      avatarPass,\n      avatarId,\n      conversationId,\n    })\n  } catch (err) {\n    console.error(err);\n  }\n}\n// End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<void>"],"params":[{"fqdn":"references.kit_functions.avatar.stopavatarsession.config","title":"config","description":"","optional":false,"types":["[AvatarStopSessionConfig](/kit/docs/references/kit_functions/avatarstopsessionconfig)"]}]}]},{"fqdn":"references.kit_functions.voximplantkit","kind":"class","title":"VoximplantKit","description":"","children":[{"fqdn":"references.kit_functions.voximplantkit.constructor","kind":"constructor","title":"constructor","description":"Voximplant Kit class, a middleware for working with functions.\n```js\nmodule.exports = async function(context, callback) {\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Some code\n console.log(Date.now());\n // End of function\n callback(200, kit.getResponseBody());\n}\n```","params":[{"fqdn":"references.kit_functions.voximplantkit.constructor.context","title":"context","description":"","optional":false,"types":["ContextObject"]}]},{"fqdn":"references.kit_functions.voximplantkit.addtags","kind":"method","title":"addTags","description":"Adds tags by id.\n```js\n const kit = new VoximplantKit(context);\n kit.addTags([12, 34]);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.addtags.tags","title":"tags","description":"","optional":false,"types":["number[]"]}]},{"fqdn":"references.kit_functions.voximplantkit.apiproxy","kind":"method","title":"apiProxy","description":"Allows you to use the Voximplant Kit API.\n```js\n// Example of getting an account name\n const kit = new VoximplantKit(context);\n try {\n    const { success, result } = await kit.apiProxy('/v2/account/getAccountInfo');\n    if (success) {\n       console.log('Account name', result.domain.name);\n    }\n } catch (err) {\n    console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<unknown>"],"params":[{"fqdn":"references.kit_functions.voximplantkit.apiproxy.url","title":"url","description":"URL address","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.apiproxy.data","title":"data","description":"","optional":false,"types":["any"]}]},{"fqdn":"references.kit_functions.voximplantkit.cancelfinishrequest","kind":"method","title":"cancelFinishRequest","description":"Reopens the client's request.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (this.isMessage()) {\n   kit.finishRequest();\n }\n // ...\n // Ð¡ondition for reopening\n const shouldCancel = true;\n if (shouldCancel) {\n   kit.cancelFinishRequest();\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.canceltransfertoqueue","kind":"method","title":"cancelTransferToQueue","description":"Cancels transferring a client to the queue.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Transfer a client to the queue\n kit.transferToQueue({queue_id: null, queue_name: 'some_queue_name'});\n //...\n // Condition for canceling the transfer to the queue\n const shouldCancel = true;\n if (shouldCancel) {\n   kit.cancelTransferToQueue();\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.canceltransfertouser","kind":"method","title":"cancelTransferToUser","description":"Cancels transferring a client to the user.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Transfer a client to the queue\n kit.transferToUser({user_id: 12});\n //...\n // Condition for canceling the transfer to the queue\n const shouldCancel = true;\n if (shouldCancel) {\n   kit.cancelTransferToUser();\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.dbcommit","kind":"method","title":"dbCommit","description":"Adds changes to the database. Available only after loadDatabases() execution.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Get a value from the function scope by key\n   const _test = kit.dbGet('test_key', 'function')\n   // If there is no data\n   if (_test === null) {\n     kit.dbSet('test_key', 'Hello world!!!', 'function');\n   }\n   // Write changes to the database\n   await kit.dbCommit();\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<boolean>"]},{"fqdn":"references.kit_functions.voximplantkit.dbdelete","kind":"method","title":"dbDelete","description":"Deletes a value from the database scope, if the key already exists. Available only after laodDatabase(). execution.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Delete a value from the function scope by key\n   kit.dbDelete('test_key', 'function')\n   // Write changes to the database\n  await kit.dbCommit();\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.dbdelete.key","title":"key","description":"Key","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.dbdelete.scope","title":"scope","description":"Database scope","optional":false,"types":["[DataBaseType](/kit/docs/references/kit_functions/databasetype)"]}]},{"fqdn":"references.kit_functions.voximplantkit.dbget","kind":"method","title":"dbGet","description":"Gets a value from the database scope by key. Available only after loadDatabases() execution.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Get the value from the function scope by key\n   const _test = kit.dbGet('test_key', 'function')\n   console.log(_test);\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.dbget.key","title":"key","description":"Key","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.dbget.scope","title":"scope","description":"Database scope","optional":false,"types":["[DataBaseType](/kit/docs/references/kit_functions/databasetype)"],"defaultValue":"\"global\""}]},{"fqdn":"references.kit_functions.voximplantkit.dbgetall","kind":"method","title":"dbGetAll","description":"Gets the whole database scope by name. Available only after loadDatabases() execution.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Read contents from the global scope\n   const global_scope = kit.dbGetAll('global');\n   console.log(global_scope)\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[ObjectType](/kit/docs/references/kit_functions/objecttype)","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.dbgetall.scope","title":"scope","description":"Database scope","optional":false,"types":["[DataBaseType](/kit/docs/references/kit_functions/databasetype)"],"defaultValue":"\"global\""}]},{"fqdn":"references.kit_functions.voximplantkit.dbset","kind":"method","title":"dbSet","description":"Adds a value to the database scope or updates it if the key already exists. Available only after loadDatabases() execution.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Get a value from the function scope by key\n   const _test = kit.dbGet('test_key', 'function')\n   // If there is no data\n   if (_test === null) {\n     kit.dbSet('test_key', 'Hello world!!!', 'function');\n   }\n   // Write changes to the database\n   await kit.dbCommit();\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.dbset.key","title":"key","description":"Key","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.dbset.value","title":"value","description":"Value","optional":false,"types":["any"]},{"fqdn":"references.kit_functions.voximplantkit.dbset.scope","title":"scope","description":"Database scope","optional":false,"types":["[DataBaseType](/kit/docs/references/kit_functions/databasetype)"],"defaultValue":"\"global\""}]},{"fqdn":"references.kit_functions.voximplantkit.deletecustomdata","kind":"method","title":"deleteCustomData","description":"Delete custom data.\n```js\n const kit = new VoximplantKit(context);\n kit.deleteCustomData('my_data');\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.deletecustomdata.name","title":"name","description":"","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.voximplantkit.deletevariable","kind":"method","title":"deleteVariable","description":"Deletes a variable by name.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n kit.deleteVariable('my_var');\n // Console will print null\n console.log(kit.getVariable('my_var'));\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.deletevariable.name","title":"name","description":"Variable name","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.voximplantkit.finishrequest","kind":"method","title":"finishRequest","description":"Closes the client's request.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (this.isMessage()) {\n   kit.finishRequest();\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.getavatarreply","kind":"method","title":"getAvatarReply","description":"Gets an avatar reply\n```js\n const kit = new VoximplantKit(context);\n if (kit.isCall()) {\n  const reply = kit.getAvatarReply();\n  console.log('Reply: ', reply);\n } // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[AvatarMessageObject](/kit/docs/references/kit_functions/avatarmessageobject)","null"]},{"fqdn":"references.kit_functions.voximplantkit.getcalldata","kind":"method","title":"getCallData","description":"Gets all call data.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isCall()) {\n   const call = kit.getCallData();\n   // Get the phone number from which the call is made\n   console.log(call.phone_a);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[CallObject](/kit/docs/references/kit_functions/callobject)","null"]},{"fqdn":"references.kit_functions.voximplantkit.getcallheaders","kind":"method","title":"getCallHeaders","description":"Gets call headers.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isCall()) {\n   const headers = kit.getCallHeaders();\n   console.log(headers);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[ObjectType](/kit/docs/references/kit_functions/objecttype)","null"]},{"fqdn":"references.kit_functions.voximplantkit.getconversationuuid","kind":"method","title":"getConversationUuid","description":"Get the conversation uuid. Only applicable when called from a channel or when calling the function as a callbackUri in the sendMessageToAvatar method.\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   const uuid = kit.getConversationUuid();\n   //... do something\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","null"]},{"fqdn":"references.kit_functions.voximplantkit.getdfkey","kind":"method","title":"getDfKey","description":"Get DialogFlow key by id.\n```js\n const kit = new VoximplantKit(context);\n const dfKey = kit.getDfKey(15);\n if (dfKey) {\n   console.log('My DF key:', dfKey);\n   //... do something\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[ObjectType](/kit/docs/references/kit_functions/objecttype)","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.getdfkey.id","title":"id","description":"","optional":false,"types":["number"]}]},{"fqdn":"references.kit_functions.voximplantkit.getdfkeyslist","kind":"method","title":"getDfKeysList","description":"Gets a list of available DialogFlow keys\n```js\n const kit = new VoximplantKit(context);\n const dfKeyList = kit.getDfKeysList();\n console.log('My DF keys:', dfKeyList);\n //... do something // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string[]"]},{"fqdn":"references.kit_functions.voximplantkit.getenvvariable","kind":"method","title":"getEnvVariable","description":"Gets an environment variable by name.\n[More details here.](https://voximplant.com/kit/docs/functions/envvariables)\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n const my_var = kit.getEnvVariable('myEnv');\n if (my_var) {\n   console.log(my_var);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.getenvvariable.name","title":"name","description":"Variable name","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.voximplantkit.getenvironmentvariable","kind":"method","title":"getEnvironmentVariable","description":"A static method used outside the function body that gets environment variables.\n```js\n const my_var = VoximplantKit.getEnvironmentVariable('myEnv');\n if (my_var) {\n   console.log(my_var);\n }\n```","returns":["string","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.getenvironmentvariable.name","title":"name","description":"","optional":false,"types":["string"]}],"modifiers":{"static":true}},{"fqdn":"references.kit_functions.voximplantkit.getfunctionuribyid","kind":"method","title":"getFunctionUriById","description":"Get the function URI by its id.\n```js\n const kit = new VoximplantKit(context);\n const uri = kit.getFunctionUriById(31);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.getfunctionuribyid.id","title":"id","description":"","optional":false,"types":["number"]}]},{"fqdn":"references.kit_functions.voximplantkit.getincomingmessage","kind":"method","title":"getIncomingMessage","description":"Gets an incoming message.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Check if the function is called from a channel\n if (kit.isMessage()) {\n   // Get text from an incoming message\n   const message = kit.getIncomingMessage();\n   console.log(message.text);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[IncomingMessageObject](/kit/docs/references/kit_functions/incomingmessageobject)","null"]},{"fqdn":"references.kit_functions.voximplantkit.getmessageobject","kind":"method","title":"getMessageObject","description":"Gets a message object.\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   const messageObject = kit.getMessageObject();\n   // ...do something\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[ChannelDataObject](/kit/docs/references/kit_functions/channeldataobject)","[ObjectType](/kit/docs/references/kit_functions/objecttype)"]},{"fqdn":"references.kit_functions.voximplantkit.getpriority","kind":"method","title":"getPriority","description":"Gets call priorities.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Return a number from 0 to 10\n const priority = kit.getPriority();\n if (priority === 10) {\n   // Something to do\n } else if (priority === 5) {\n   // Something to do\n } else {\n   // Something to do\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["number"]},{"fqdn":"references.kit_functions.voximplantkit.getresponsebody","kind":"method","title":"getResponseBody","description":"Gets a function response. Needs to be called at the end of each function.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[CallDataObject](/kit/docs/references/kit_functions/calldataobject)","[ChannelDataObject](/kit/docs/references/kit_functions/channeldataobject)","undefined"]},{"fqdn":"references.kit_functions.voximplantkit.getskills","kind":"method","title":"getSkills","description":"Gets all skills.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (this.isCall()) {\n   const all_skills = kit.getSkills();\n   console.log('All skills:', all_skills);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[SkillObject](/kit/docs/references/kit_functions/skillobject)[]"]},{"fqdn":"references.kit_functions.voximplantkit.gettags","kind":"method","title":"getTags","description":"Gets tags.\n```js\n const kit = new VoximplantKit(context);\n await kit.getTags(); // [12, 34]\n await kit.getTags(true); // [{id: 12, tag_name: 'my_tag'}, {id: 34, tag_name: 'my_tag2'}]\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<number[]>","Promise<[GetTagsResult](/kit/docs/references/kit_functions/gettagsresult)[]>"],"params":[{"fqdn":"references.kit_functions.voximplantkit.gettags.withname","title":"withName","description":"If the argument is true, it returns the array with the id and tag names. Otherwise, it will return the array with the id tags","optional":true,"types":["boolean"]}]},{"fqdn":"references.kit_functions.voximplantkit.getvariable","kind":"method","title":"getVariable","description":"Gets a variable by name.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n const my_var = kit.getVariable('my_var');\n if (my_var) {\n   console.log(my_var);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","null"],"params":[{"fqdn":"references.kit_functions.voximplantkit.getvariable.name","title":"name","description":"Variable name","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.voximplantkit.getvariables","kind":"method","title":"getVariables","description":"Gets all variables.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n const all_vars = kit.getVariables();\n console.log(all_vars);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]},{"fqdn":"references.kit_functions.voximplantkit.isavatar","kind":"method","title":"isAvatar","description":"The function is called by the avatar.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isAvatar()) {\n   //...do something\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.iscall","kind":"method","title":"isCall","description":"The function is called from a call.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isCall()) {\n   console.log('This function is called from the call')\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.ismessage","kind":"method","title":"isMessage","description":"The function is called from a message.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isMessage()) {\n   console.log('This function is called from the channel');\n   const message = kit.getIncomingMessage();\n   //...\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"]},{"fqdn":"references.kit_functions.voximplantkit.loaddatabases","kind":"method","title":"loadDatabases","description":"Loads the databases available in the scope.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n try {\n   // Connect available databases\n   await kit.loadDatabases();\n   // Read contents from the global scope\n   const global_scope = kit.dbGetAll('global');\n   console.log(global_scope)\n } catch(err) {\n   console.log(err);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["Promise<void>"]},{"fqdn":"references.kit_functions.voximplantkit.removeskill","kind":"method","title":"removeSkill","description":"Removes a skill by id.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n kit.removeSkill(234);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.removeskill.id","title":"id","description":"Name of the skill to remove","optional":false,"types":["number"]}]},{"fqdn":"references.kit_functions.voximplantkit.replacetags","kind":"method","title":"replaceTags","description":"Replaces all tags.\n```js\n const kit = new VoximplantKit(context);\n kit.replaceTags([12, 34]);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.replacetags.tags","title":"tags","description":"","optional":false,"types":["number[]"]}]},{"fqdn":"references.kit_functions.voximplantkit.setcustomdata","kind":"method","title":"setCustomData","description":"Set custom data.\n```js\n const kit = new VoximplantKit(context);\n kit.setCustomData('my_data', {a: 1, b 'some text'}); // [12, 34]\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setcustomdata.name","title":"name","description":"","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.setcustomdata.data","title":"data","description":"","optional":false,"types":["unknown"]}]},{"fqdn":"references.kit_functions.voximplantkit.setpriority","kind":"method","title":"setPriority","description":"Sets the call priority. The higher the priority, the less time a client will wait for the operator's response.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Transfer a client to the queue\n kit.transferToQueue({queue_id: null, queue_name: 'some_queue_name'});\n // Set the highest priority\n kit.setPriority(10);\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setpriority.value","title":"value","description":"Priority value, from 0 to 10","optional":false,"types":["number"]}]},{"fqdn":"references.kit_functions.voximplantkit.setreplymessagetext","kind":"method","title":"setReplyMessageText","description":"Sets a reply message text.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Check if the function is called from a channel\n if (kit.isMessage()) {\n   // Get text from an incoming message\n   const message = kit.getIncomingMessage();\n   console.log(message.text);\n   // Set text of the reply\n   kit.setReplyMessageText('you wrote ' + message.text);\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setreplymessagetext.text","title":"text","description":"Reply text","optional":false,"types":["string"]}]},{"fqdn":"references.kit_functions.voximplantkit.setreplywebchatinlinebuttons","kind":"method","title":"setReplyWebChatInlineButtons","description":"Adds buttons for the web chat channel\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   // Text is required for each button and must not be greater than 40 char.\n   // The max number of buttons is 13.\n   const buttons = [\n     {type: 'text', text: 'Some btn text', data: 'Some btn data'}\n     {type: 'text', text: 'Another btn text', data: JSON.stringify({name: 'Jon Doe', age: 30})}\n   ]\n   kit.setReplyWebChatInlineButtons(buttons);\n } // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setreplywebchatinlinebuttons.buttons","title":"buttons","description":"","optional":false,"types":["[WebChatInlineButton](/kit/docs/references/kit_functions/webchatinlinebutton)[]"]}]},{"fqdn":"references.kit_functions.voximplantkit.setskill","kind":"method","title":"setSkill","description":"Adds a skill or updates it if the skill id already exists.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (kit.isCall()) {\n   kit.setSkill({skill_id: 234, level: 5});\n } else if (kit.isMessage()) {\n   kit.setSkill({skill_id: 35, level: 3});\n   kit.transferToQueue({queue_id: 72});\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setskill.skill","title":"skill","description":"","optional":false,"types":["[SkillObject](/kit/docs/references/kit_functions/skillobject)"]}]},{"fqdn":"references.kit_functions.voximplantkit.settelegraminlinekeyboard","kind":"method","title":"setTelegramInlineKeyboard","description":"Adds inline keyboard for the telegram channel\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   // Without a reply message, the keyboard will not be displayed\n   const message = kit.getIncomingMessage();\n   kit.setReplyMessageText(`You wrote: ${message.text}`);    // An array of arrays with keyboard buttons.\n    // Text is required for each keyboard.\n   const inline_keyboard_markup = [\n      // Row one\n     [\n        {text: 'text', url: 'url', callback_data: '1'},\n        {text: 'text 2', url: 'url'},\n      ],\n      // Row two\n      [\n        {text: 'text', url: 'url', callback_data: '1'},\n      ]\n   ]\n   kit.setTelegramInlineKeyboard(buttons);\n\n   // Calling the kit.setTelegramInlineKeyboard method\n   // with an empty array will clear previously passed buttons\n   // kit.setTelegramInlineKeyboard([]);\n }\n\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.settelegraminlinekeyboard.keyboard_markup","title":"keyboard_markup","description":"","optional":false,"types":["[TelegramInlineKeyboardButton](/kit/docs/references/kit_functions/telegraminlinekeyboardbutton)[][]"]}]},{"fqdn":"references.kit_functions.voximplantkit.settelegramreplykeyboard","kind":"method","title":"setTelegramReplyKeyboard","description":"Adds reply keyboard for the telegram channel\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   // Without a reply message, the keyboard will not be displayed\n   const message = kit.getIncomingMessage();\n   kit.setReplyMessageText(`You wrote: ${message.text}`);   // An array of arrays with keyboard buttons.\n   // Text is required for each keyboard.\n   const reply_keyboard_markup = [\n      // Row one\n     [\n        {text: 'button 1', request_contact: true},\n        {text: 'button 2'},\n      ],\n      // Row two\n      [\n        {text: 'button 3', request_location: true},\n      ]\n   ]\n   // Optional params\n   const params = {\n     is_persistent : false,\n     resize_keyboard: false,\n     one_time_keyboard: false,\n     input_field_placeholder: 'Some text',\n     selective: false\n   }\n   kit.setTelegramReplyKeyboard(reply_keyboard_markup, params);\n\n\n   // Calling the kit.settelgramreplykeyboard method\n   // with an empty array will clear previously passed buttons\n   // kit.setTelegramReplyKeyboard([]);\n }\n\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.settelegramreplykeyboard.keyboard_markup","title":"keyboard_markup","description":"","optional":false,"types":["[TelegramReplyKeyboardButton](/kit/docs/references/kit_functions/telegramreplykeyboardbutton)[][]"]},{"fqdn":"references.kit_functions.voximplantkit.settelegramreplykeyboard.keyboard_params","title":"keyboard_params","description":"","optional":false,"types":["[TelegramReplyKeyboardParams](/kit/docs/references/kit_functions/telegramreplykeyboardparams)"],"defaultValue":"{}"}]},{"fqdn":"references.kit_functions.voximplantkit.settelegramreplykeyboardremove","kind":"method","title":"setTelegramReplyKeyboardRemove","description":"Remove replyKeyboard for telegram channel\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n   const remove_params = {\n     remove_keyboard: true, // required\n     selective: false\n   }\n   kit.setTelegramReplyKeyboardRemove(remove_params);\n } // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.settelegramreplykeyboardremove.remove_params","title":"remove_params","description":"","optional":false,"types":["[TelegramReplyKeyboardRemove](/kit/docs/references/kit_functions/telegramreplykeyboardremove)"]}]},{"fqdn":"references.kit_functions.voximplantkit.setvariable","kind":"method","title":"setVariable","description":"Adds a variable or updates it if the variable name already exists.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n kit.setVariable('my_var', 'some_value');\n console.log(kit.getVariable('my_var'));\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setvariable.name","title":"name","description":"Variable name","optional":false,"types":["string"]},{"fqdn":"references.kit_functions.voximplantkit.setvariable.value","title":"value","description":"Variable value","optional":false,"types":["any"]}]},{"fqdn":"references.kit_functions.voximplantkit.setwhatsappednakeyboard","kind":"method","title":"setWhatsappEdnaKeyboard","description":"Set Whatsapp Edna keyboard\n```js\n const kit = new VoximplantKit(context);\n if (kit.isMessage() || kit.isAvatar()) {\n    const message = kit.getIncomingMessage();\n    kit.setReplyMessageText(`You wrote: ${message.text}`);\n    const keyboard = [\n        {\n            \"buttons\": [\n                {\n                    \"text\": \"test 1\", // Required\n                    \"payload\": \"test payload 1\",\n                    \"type\": \"QUICK_REPLY\" // Required\n                },\n                {\n                    \"text\": \"test 2\", // Required\n                    \"payload\": \"test payload 2\",\n                    \"type\": \"QUICK_REPLY\" // Required\n                },\n            ]\n        }\n    ];\n    const isSet = kit.setWhatsappEdnaKeyboard(keyboard);\n    console.log('Buttons for whatsapp have been added:', isSet);\n } // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.setwhatsappednakeyboard.keyboard_rows","title":"keyboard_rows","description":"","optional":false,"types":["[WhatsappEdnaKeyboardRow](/kit/docs/references/kit_functions/whatsappednakeyboardrow)[]"]}]},{"fqdn":"references.kit_functions.voximplantkit.transfertoqueue","kind":"method","title":"transferToQueue","description":"Transfers a client to the queue.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n // Transfer a client to the queue\n kit.transferToQueue({queue_id: 82});\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.transfertoqueue.queue","title":"queue","description":"","optional":false,"types":["[QueueInfo](/kit/docs/references/kit_functions/queueinfo)"]}]},{"fqdn":"references.kit_functions.voximplantkit.transfertouser","kind":"method","title":"transferToUser","description":"Transfers a client to the user. Only for text channels and Avatar.\n```js\n // Initialize a VoximplantKit instance\n const kit = new VoximplantKit(context);\n if (this.isMessage() || this.isAvatar()) {\n   // Use user_id or user_email.\n   kit.transferToUser({user_id: 12});\n }\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.voximplantkit.transfertouser.user","title":"user","description":"","optional":false,"types":["[UserInfo](/kit/docs/references/kit_functions/userinfo)"]}]},{"fqdn":"references.kit_functions.voximplantkit.version","kind":"method","title":"version","description":"Gets a clientâs SDK version.\n```js\n const kit = new VoximplantKit(context);\n // Get a clientâs SDK version\n kit.version();\n // End of function\n callback(200, kit.getResponseBody());\n```","returns":["string","void"]},{"fqdn":"references.kit_functions.voximplantkit.avatar","kind":"prop","title":"avatar","description":"","types":["[Avatar](/kit/docs/references/kit_functions/avatar)"]}]},{"fqdn":"references.kit_functions.avatarconfig","kind":"interface","title":"AvatarConfig","description":"","children":[{"fqdn":"references.kit_functions.avatarconfig.avatarid","kind":"prop","title":"avatarId","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.avatarlogin","kind":"prop","title":"avatarLogin","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.avatarpass","kind":"prop","title":"avatarPass","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.callbackuri","kind":"prop","title":"callbackUri","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.conversationid","kind":"prop","title":"conversationId","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.customdata","kind":"prop","title":"customData","description":"","types":["unknown"]},{"fqdn":"references.kit_functions.avatarconfig.utterance","kind":"prop","title":"utterance","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarconfig.voxaccountid","kind":"prop","title":"voxAccountId","description":"","types":["string"]}]},{"fqdn":"references.kit_functions.avatarloginparams","kind":"interface","title":"AvatarLoginParams","description":"","children":[{"fqdn":"references.kit_functions.avatarloginparams.avatarlogin","kind":"prop","title":"avatarLogin","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarloginparams.avatarpass","kind":"prop","title":"avatarPass","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarloginparams.voxaccountid","kind":"prop","title":"voxAccountId","description":"","types":["string"]}]},{"fqdn":"references.kit_functions.avatarmessageobject","kind":"interface","title":"AvatarMessageObject","description":"","children":[{"fqdn":"references.kit_functions.avatarmessageobject.chat_id","kind":"prop","title":"chat_id","description":"","types":["string"],"optional":true},{"fqdn":"references.kit_functions.avatarmessageobject.conversation_id","kind":"prop","title":"conversation_id","description":"","types":["string"],"optional":true},{"fqdn":"references.kit_functions.avatarmessageobject.current_state","kind":"prop","title":"current_state","description":"","types":["string","null"],"optional":true},{"fqdn":"references.kit_functions.avatarmessageobject.custom_data","kind":"prop","title":"custom_data","description":"","types":["null","string"]},{"fqdn":"references.kit_functions.avatarmessageobject.is_final","kind":"prop","title":"is_final","description":"","types":["boolean"]},{"fqdn":"references.kit_functions.avatarmessageobject.next_state","kind":"prop","title":"next_state","description":"","types":["string","null"],"optional":true},{"fqdn":"references.kit_functions.avatarmessageobject.response","kind":"prop","title":"response","description":"","types":["string"]}]},{"fqdn":"references.kit_functions.avatarstopsessionconfig","kind":"interface","title":"AvatarStopSessionConfig","description":"","children":[{"fqdn":"references.kit_functions.avatarstopsessionconfig.avatarid","kind":"prop","title":"avatarId","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarstopsessionconfig.avatarlogin","kind":"prop","title":"avatarLogin","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarstopsessionconfig.avatarpass","kind":"prop","title":"avatarPass","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarstopsessionconfig.conversationid","kind":"prop","title":"conversationId","description":"","types":["string"]},{"fqdn":"references.kit_functions.avatarstopsessionconfig.voxaccountid","kind":"prop","title":"voxAccountId","description":"","types":["string"]}]},{"fqdn":"references.kit_functions.calldataobject","kind":"interface","title":"CallDataObject","description":"","children":[{"fqdn":"references.kit_functions.calldataobject.skills","kind":"prop","title":"SKILLS","description":"","types":["[SkillObject](/kit/docs/references/kit_functions/skillobject)[]"]},{"fqdn":"references.kit_functions.calldataobject.tags","kind":"prop","title":"TAGS","description":"","types":["number[]"]},{"fqdn":"references.kit_functions.calldataobject.variables","kind":"prop","title":"VARIABLES","description":"","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]}]},{"fqdn":"references.kit_functions.callobject","kind":"interface","title":"CallObject","description":"","children":[{"fqdn":"references.kit_functions.callobject.attempt_num","kind":"prop","title":"attempt_num","description":"Attempt number","types":["number"]},{"fqdn":"references.kit_functions.callobject.callerid","kind":"prop","title":"callerid","description":"Caller phone number","types":["string"]},{"fqdn":"references.kit_functions.callobject.destination","kind":"prop","title":"destination","description":"Destination phone number","types":["string"]},{"fqdn":"references.kit_functions.callobject.display_name","kind":"prop","title":"display_name","description":"Name of the caller that is displayed to the called party. Normally it's a human-readable version of CallerID, e.g. a person's name","types":["string"]},{"fqdn":"references.kit_functions.callobject.id","kind":"prop","title":"id","description":"","types":["number"]},{"fqdn":"references.kit_functions.callobject.phone_a","kind":"prop","title":"phone_a","description":"Caller phone number. Equivalent to the <b>callerid</b> value","types":["string"]},{"fqdn":"references.kit_functions.callobject.phone_b","kind":"prop","title":"phone_b","description":"Destination phone number. Equivalent to the <b>destination</b> value","types":["string"]},{"fqdn":"references.kit_functions.callobject.record_url","kind":"prop","title":"record_url","description":"Recording URL","types":["string"]},{"fqdn":"references.kit_functions.callobject.session_id","kind":"prop","title":"session_id","description":"Voximplant session id","types":["string"]}]},{"fqdn":"references.kit_functions.channeldataobject","kind":"interface","title":"ChannelDataObject","description":"","children":[{"fqdn":"references.kit_functions.channeldataobject.payload","kind":"prop","title":"payload","description":"","types":["MessagePayloadItem[]"]},{"fqdn":"references.kit_functions.channeldataobject.text","kind":"prop","title":"text","description":"","types":["string"]},{"fqdn":"references.kit_functions.channeldataobject.variables","kind":"prop","title":"variables","description":"","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]}]},{"fqdn":"references.kit_functions.conversationcustomdataclientdataobject","kind":"interface","title":"ConversationCustomDataClientDataObject","description":"","children":[{"fqdn":"references.kit_functions.conversationcustomdataclientdataobject.client_avatar","kind":"prop","title":"client_avatar","description":"Client avatar URL","types":["string"]},{"fqdn":"references.kit_functions.conversationcustomdataclientdataobject.client_display_name","kind":"prop","title":"client_display_name","description":"Client display name","types":["string"]},{"fqdn":"references.kit_functions.conversationcustomdataclientdataobject.client_id","kind":"prop","title":"client_id","description":"Client id in the remote channel, external identifier","types":["string"]},{"fqdn":"references.kit_functions.conversationcustomdataclientdataobject.client_phone","kind":"prop","title":"client_phone","description":"Client phone number","types":["string"]}]},{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject","kind":"interface","title":"ConversationCustomDataConversationDataObject","description":"","children":[{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject.channel_type","kind":"prop","title":"channel_type","description":"Channel from which the message was sent","types":["[ChannelType](/kit/docs/references/kit_functions/channeltype)"]},{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject.is_read","kind":"prop","title":"is_read","description":"Message is read","types":["boolean"]},{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject.last_message_sender_type","kind":"prop","title":"last_message_sender_type","description":"Sender of the last message","types":["string"]},{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject.last_message_text","kind":"prop","title":"last_message_text","description":"Text of the last message","types":["string"]},{"fqdn":"references.kit_functions.conversationcustomdataconversationdataobject.last_message_time","kind":"prop","title":"last_message_time","description":"Time when the last message was sent","types":["number"]}]},{"fqdn":"references.kit_functions.conversationcustomdataobject","kind":"interface","title":"ConversationCustomDataObject","description":"","children":[{"fqdn":"references.kit_functions.conversationcustomdataobject.client_data","kind":"prop","title":"client_data","description":"Client data","types":["[ConversationCustomDataClientDataObject](/kit/docs/references/kit_functions/conversationcustomdataclientdataobject)"]},{"fqdn":"references.kit_functions.conversationcustomdataobject.conversation_data","kind":"prop","title":"conversation_data","description":"Conversation data","types":["[ConversationCustomDataConversationDataObject](/kit/docs/references/kit_functions/conversationcustomdataconversationdataobject)"]},{"fqdn":"references.kit_functions.conversationcustomdataobject.customer_data","kind":"prop","title":"customer_data","description":"Customer data","types":["{id: number}"],"optional":true},{"fqdn":"references.kit_functions.conversationcustomdataobject.request_data","kind":"prop","title":"request_data","description":"Request data","types":["[ConversationCustomDataRequestData](/kit/docs/references/kit_functions/conversationcustomdatarequestdata)"]}]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata","kind":"interface","title":"ConversationCustomDataRequestData","description":"","children":[{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.completed","kind":"prop","title":"completed","description":"Conversation is complete","types":["boolean"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.conversation_id","kind":"prop","title":"conversation_id","description":"Conversation id (the whole chat in the channel)","types":["number"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.end_time","kind":"prop","title":"end_time","description":"Time when the request was closed","types":["number"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.handling_start_time","kind":"prop","title":"handling_start_time","description":"Time when the agent started processing the request","types":["number"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.id","kind":"prop","title":"id","description":"","types":["number"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.start_time","kind":"prop","title":"start_time","description":"Time when the request was created","types":["number"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.tags","kind":"prop","title":"tags","description":"Tags","types":["{id: number}[]"]},{"fqdn":"references.kit_functions.conversationcustomdatarequestdata.variables","kind":"prop","title":"variables","description":"Variables object","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]}]},{"fqdn":"references.kit_functions.database","kind":"interface","title":"DataBase","description":"","children":[{"fqdn":"references.kit_functions.database.conversation","kind":"prop","title":"conversation","description":"Conversation scope object","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]},{"fqdn":"references.kit_functions.database.function","kind":"prop","title":"function","description":"Function scope object","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]},{"fqdn":"references.kit_functions.database.global","kind":"prop","title":"global","description":"Global scope object","types":["[ObjectType](/kit/docs/references/kit_functions/objecttype)"]}]},{"fqdn":"references.kit_functions.incomingmessageobject","kind":"interface","title":"IncomingMessageObject","description":"","children":[{"fqdn":"references.kit_functions.incomingmessageobject.countcontacts","kind":"prop","title":"CountContacts","description":"The counter of the contacts contained in the incoming message","types":["number"]},{"fqdn":"references.kit_functions.incomingmessageobject.countlocations","kind":"prop","title":"CountLocations","description":"The counter of the locations contained in the incoming message","types":["number"]},{"fqdn":"references.kit_functions.incomingmessageobject.button_data","kind":"prop","title":"button_data","description":"The data of the pressed inline button from the web chat channel","types":["string","null"]},{"fqdn":"references.kit_functions.incomingmessageobject.contacts","kind":"prop","title":"contacts","description":"","types":["[PayloadContact](/kit/docs/references/kit_functions/payloadcontact)[]"],"optional":true},{"fqdn":"references.kit_functions.incomingmessageobject.conversation","kind":"prop","title":"conversation","description":"Conversation that the message belongs to","types":["[MessageConversation](/kit/docs/references/kit_functions/messageconversation)"]},{"fqdn":"references.kit_functions.incomingmessageobject.customer","kind":"prop","title":"customer","description":"Entity for combining different channels of one client","types":["[MessageCustomer](/kit/docs/references/kit_functions/messagecustomer)"]},{"fqdn":"references.kit_functions.incomingmessageobject.id","kind":"prop","title":"id","description":"Message id","types":["number"]},{"fqdn":"references.kit_functions.incomingmessageobject.locations","kind":"prop","title":"locations","description":"","types":["[PayloadLocation](/kit/docs/references/kit_functions/payloadlocation)[]"],"optional":true},{"fqdn":"references.kit_functions.incomingmessageobject.sender","kind":"prop","title":"sender","description":"Sender of the message","types":["[MessageSender](/kit/docs/references/kit_functions/messagesender)"]},{"fqdn":"references.kit_functions.incomingmessageobject.text","kind":"prop","title":"text","description":"Message text","types":["string"]}]},{"fqdn":"references.kit_functions.incomingrequestobject","kind":"interface","title":"IncomingRequestObject","description":"","children":[{"fqdn":"references.kit_functions.incomingrequestobject.completed","kind":"prop","title":"completed","description":"Conversation is complete","types":["boolean"]},{"fqdn":"references.kit_functions.incomingrequestobject.conversation_id","kind":"prop","title":"conversation_id","description":"Conversation id (the whole chat in the channel)","types":["number"]},{"fqdn":"references.kit_functions.incomingrequestobject.end_time","kind":"prop","title":"end_time","description":"Time when the request was closed","types":["number"]},{"fqdn":"references.kit_functions.incomingrequestobject.handling_start_time","kind":"prop","title":"handling_start_time","description":"Time when the agent started processing the request","types":["number"]},{"fqdn":"references.kit_functions.incomingrequestobject.id","kind":"prop","title":"id","description":"Request id","types":["number"]},{"fqdn":"references.kit_functions.incomingrequestobject.start_time","kind":"prop","title":"start_time","description":"Time when the request was created","types":["number"]}]},{"fqdn":"references.kit_functions.messageconversation","kind":"interface","title":"MessageConversation","description":"","children":[{"fqdn":"references.kit_functions.messageconversation.channel","kind":"prop","title":"channel","description":"Conversation channel object","types":["[MessageConversationChannel](/kit/docs/references/kit_functions/messageconversationchannel)"]},{"fqdn":"references.kit_functions.messageconversation.client_id","kind":"prop","title":"client_id","description":"Client id in the remote channel, external identifier","types":["string"]},{"fqdn":"references.kit_functions.messageconversation.current_request","kind":"prop","title":"current_request","description":"Current request object","types":["[IncomingRequestObject](/kit/docs/references/kit_functions/incomingrequestobject)"]},{"fqdn":"references.kit_functions.messageconversation.current_status","kind":"prop","title":"current_status","description":"Current status of the request: new, unassigned, processed_by_function, waiting_agent, processed_by_agent, done","types":["string"]},{"fqdn":"references.kit_functions.messageconversation.custom_data","kind":"prop","title":"custom_data","description":"Custom data object","types":["[ConversationCustomDataObject](/kit/docs/references/kit_functions/conversationcustomdataobject)"]},{"fqdn":"references.kit_functions.messageconversation.id","kind":"prop","title":"id","description":"Conversation id","types":["number"]}]},{"fqdn":"references.kit_functions.messageconversationchannel","kind":"interface","title":"MessageConversationChannel","description":"","children":[{"fqdn":"references.kit_functions.messageconversationchannel.channel_type","kind":"prop","title":"channel_type","description":"Channel type","types":["[ChannelType](/kit/docs/references/kit_functions/channeltype)"]},{"fqdn":"references.kit_functions.messageconversationchannel.channel_uuid","kind":"prop","title":"channel_uuid","description":"Channel universally unique identifier (UUID)","types":["string"]},{"fqdn":"references.kit_functions.messageconversationchannel.id","kind":"prop","title":"id","description":"Channel id","types":["number"]},{"fqdn":"references.kit_functions.messageconversationchannel.processing_function","kind":"prop","title":"processing_function","description":"Function that processes the channel if the processing method is a function","types":["number"]},{"fqdn":"references.kit_functions.messageconversationchannel.processing_method","kind":"prop","title":"processing_method","description":"Channel processing method (a function or a queue)","types":["string"]},{"fqdn":"references.kit_functions.messageconversationchannel.processing_queue","kind":"prop","title":"processing_queue","description":"Queue that processes the channel if the processing method is a queue","types":["object"]}]},{"fqdn":"references.kit_functions.messagecustomer","kind":"interface","title":"MessageCustomer","description":"","children":[{"fqdn":"references.kit_functions.messagecustomer.customer_client_ids","kind":"prop","title":"customer_client_ids","description":"Array of the client's channels","types":["[MessageCustomerClientIds](/kit/docs/references/kit_functions/messagecustomerclientids)[]"]},{"fqdn":"references.kit_functions.messagecustomer.customer_details","kind":"prop","title":"customer_details","description":"Customer details","types":["string"]},{"fqdn":"references.kit_functions.messagecustomer.customer_display_name","kind":"prop","title":"customer_display_name","description":"Customer display name","types":["string"]},{"fqdn":"references.kit_functions.messagecustomer.customer_emails","kind":"prop","title":"customer_emails","description":"Array of email addresses","types":["string[]"]},{"fqdn":"references.kit_functions.messagecustomer.customer_external_id","kind":"prop","title":"customer_external_id","description":"Additional customer info","types":["string"]},{"fqdn":"references.kit_functions.messagecustomer.customer_phones","kind":"prop","title":"customer_phones","description":"Array of phone numbers","types":["string[]"]},{"fqdn":"references.kit_functions.messagecustomer.customer_photo","kind":"prop","title":"customer_photo","description":"Customer photo URL","types":["string"]},{"fqdn":"references.kit_functions.messagecustomer.id","kind":"prop","title":"id","description":"Customer id","types":["number"]}]},{"fqdn":"references.kit_functions.messagecustomerclientids","kind":"interface","title":"MessageCustomerClientIds","description":"","children":[{"fqdn":"references.kit_functions.messagecustomerclientids.client_id","kind":"prop","title":"client_id","description":"Client id in the remote channel, external identifier. Can be email, phone number, etc. depending on the channel type","types":["string"]},{"fqdn":"references.kit_functions.messagecustomerclientids.client_type","kind":"prop","title":"client_type","description":"Channel type","types":["string"]}]},{"fqdn":"references.kit_functions.messageobject","kind":"interface","title":"MessageObject","description":"","children":[{"fqdn":"references.kit_functions.messageobject.button_data","kind":"prop","title":"button_data","description":"The data of the pressed inline button from the web chat channel","types":["string","null"]},{"fqdn":"references.kit_functions.messageobject.conversation","kind":"prop","title":"conversation","description":"Conversation that the message belongs to","types":["[MessageConversation](/kit/docs/references/kit_functions/messageconversation)"]},{"fqdn":"references.kit_functions.messageobject.customer","kind":"prop","title":"customer","description":"Entity for combining different channels of one client","types":["[MessageCustomer](/kit/docs/references/kit_functions/messagecustomer)"]},{"fqdn":"references.kit_functions.messageobject.id","kind":"prop","title":"id","description":"Message id","types":["number"]},{"fqdn":"references.kit_functions.messageobject.sender","kind":"prop","title":"sender","description":"Sender of the message","types":["[MessageSender](/kit/docs/references/kit_functions/messagesender)"]},{"fqdn":"references.kit_functions.messageobject.text","kind":"prop","title":"text","description":"Message text","types":["string"]}]},{"fqdn":"references.kit_functions.messagesender","kind":"interface","title":"MessageSender","description":"","children":[{"fqdn":"references.kit_functions.messagesender.is_bot","kind":"prop","title":"is_bot","description":"Message sender is a bot","types":["boolean"]}]},{"fqdn":"references.kit_functions.payloadcontact","kind":"interface","title":"PayloadContact","description":"","children":[{"fqdn":"references.kit_functions.payloadcontact.avatar","kind":"prop","title":"avatar","description":"","types":["string"],"optional":true},{"fqdn":"references.kit_functions.payloadcontact.name","kind":"prop","title":"name","description":"","types":["string"]},{"fqdn":"references.kit_functions.payloadcontact.number","kind":"prop","title":"number","description":"","types":["number"]}]},{"fqdn":"references.kit_functions.payloadlocation","kind":"interface","title":"PayloadLocation","description":"","children":[{"fqdn":"references.kit_functions.payloadlocation.latitude","kind":"prop","title":"latitude","description":"","types":["number"]},{"fqdn":"references.kit_functions.payloadlocation.longitude","kind":"prop","title":"longitude","description":"","types":["number"]}]},{"fqdn":"references.kit_functions.queueinfo","kind":"interface","title":"QueueInfo","description":"","children":[{"fqdn":"references.kit_functions.queueinfo.queue_id","kind":"prop","title":"queue_id","description":"Queue id","types":["number"]}]},{"fqdn":"references.kit_functions.skillobject","kind":"interface","title":"SkillObject","description":"","children":[{"fqdn":"references.kit_functions.skillobject.level","kind":"prop","title":"level","description":"Proficiency level","types":["number"]},{"fqdn":"references.kit_functions.skillobject.skill_id","kind":"prop","title":"skill_id","description":"Skill id","types":["number"],"optional":true}]},{"fqdn":"references.kit_functions.userinfo","kind":"interface","title":"UserInfo","description":"","children":[{"fqdn":"references.kit_functions.userinfo.user_email","kind":"prop","title":"user_email","description":"","types":["string"]},{"fqdn":"references.kit_functions.userinfo.user_id","kind":"prop","title":"user_id","description":"","types":["number"]}]},{"fqdn":"references.kit_functions.checkparams","kind":"function","title":"checkParams","description":"","returns":["void"],"params":[{"fqdn":"references.kit_functions.checkparams.defaultconfig","title":"defaultConfig","description":"","optional":false,"types":["DefaultConfig"]},{"fqdn":"references.kit_functions.checkparams.config","title":"config","description":"","optional":false,"types":["[AvatarConfig](/kit/docs/references/kit_functions/avatarconfig)","[AvatarStopSessionConfig](/kit/docs/references/kit_functions/avatarstopsessionconfig)"]}]},{"fqdn":"references.kit_functions.isobject","kind":"function","title":"isObject","description":"","returns":["boolean"],"params":[{"fqdn":"references.kit_functions.isobject.item","title":"item","description":"","optional":false,"types":["any"]}]},{"fqdn":"references.kit_functions.webchatinlinebuttontype","kind":"enum","title":"WebChatInlineButtonType","description":"","children":[{"fqdn":"references.kit_functions.webchatinlinebuttontype.text","kind":"constants","title":"Text","description":""}]},{"fqdn":"references.kit_functions.channeltype","kind":"typedef","title":"ChannelType","description":"","types":["telegram","whatsapp-edna","viber","sms","facebook","vk","odnoklassniki","custom","webchat"]},{"fqdn":"references.kit_functions.databasetype","kind":"typedef","title":"DataBaseType","description":"","types":["function","global","conversation"]},{"fqdn":"references.kit_functions.dbresponse","kind":"typedef","title":"DbResponse","description":"","types":["{result: string}"]},{"fqdn":"references.kit_functions.gettagsresult","kind":"typedef","title":"GetTagsResult","description":"","types":["{id: number, tag_name: string | null}"]},{"fqdn":"references.kit_functions.objecttype","kind":"typedef","title":"ObjectType","description":"","types":["{[key: string]: string}"]},{"fqdn":"references.kit_functions.telegraminlinekeyboardbutton","kind":"typedef","title":"TelegramInlineKeyboardButton","description":"","types":["{callback_data: string, text: string, url: string}"]},{"fqdn":"references.kit_functions.telegramreplykeyboardbutton","kind":"typedef","title":"TelegramReplyKeyboardButton","description":"","types":["{request_contact: boolean, request_location: boolean, text: string}"]},{"fqdn":"references.kit_functions.telegramreplykeyboardparams","kind":"typedef","title":"TelegramReplyKeyboardParams","description":"","types":["{input_field_placeholder: string, is_persistent: boolean, one_time_keyboard: boolean, resize_keyboard: boolean, selective: boolean}"]},{"fqdn":"references.kit_functions.telegramreplykeyboardremove","kind":"typedef","title":"TelegramReplyKeyboardRemove","description":"","types":["{remove_keyboard: boolean, selective: boolean}"]},{"fqdn":"references.kit_functions.webchatinlinebutton","kind":"typedef","title":"WebChatInlineButton","description":"","types":["{data: string, text: string, type: [WebChatInlineButtonType](/kit/docs/references/kit_functions/webchatinlinebuttontype)}"]},{"fqdn":"references.kit_functions.whatsappednakeyboardbutton","kind":"typedef","title":"WhatsappEdnaKeyboardButton","description":"","types":["{payload: string, phone: string, text: string, type: QUICK_REPLY, url: string, urlPostfix: string}"]},{"fqdn":"references.kit_functions.whatsappednakeyboardrow","kind":"typedef","title":"WhatsappEdnaKeyboardRow","description":"","types":["{buttons: [WhatsappEdnaKeyboardButton](/kit/docs/references/kit_functions/whatsappednakeyboardbutton)[]}"]}]